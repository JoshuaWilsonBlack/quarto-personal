{
  "hash": "062c3e3afebcad13056b5e8076979761",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"`nzilbb.vowels` 0.3.1\"\nauthor: \"Joshua Wilson Black\"\ndate: \"2024-12-01\"\ncategories:\n  - linguistics\n  - sociolinguistics\n  - data science\nbibliography:\n  - ../../publications.bib\n  - ../../presentations.bib\nimage: logo.png\n---\n\n\n\n\n\nThe `nzilbb.vowels` R package has just been released to \n[CRAN](https://cran.r-project.org/web/packages/nzilbb.vowels/index.html). This is\nthe first release on CRAN and contains a few modifications from the version\nwhich was available on GitHub and used in @Wilson_Black_2022.\n\n## `plot_pc_vs()` and `pc_flip()`\n\nThe model-to-PCA workflow for vocalic data can produce results which require \na lot of mental 'axis flipping'. First, the convention is to plot the axes\nin reverse in vowel space diagrams. Second, when two PCA \nanalyses with one another, one might have a positive loadings where the other\nhas negative loadings. But the sign of a PC is arbitrary.\n\nTo quickly solve the 'loadings-to-vowel space' problem, I've added a function \ncalled `plot_pc_vs()`, which plots a principal component generated by \n`prcomp`, `princomp` or `nzilbb.vowels::pca_test()` in the vowel space. For \ninstance:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonze_vowels <- onze_vowels |>  \n  # apply lobanov normalisation\n  lobanov_2() |> \n  # put lobanov normalised values towards front of data frame.\n  relocate(speaker, vowel, F1_lob2, F2_lob2)\n\npca_data <- onze_intercepts |>\n  select(-speaker)\n\nonze_test <- pca_test(\n  pca_data,\n  n = 500,\n  scale = TRUE,\n  variance_confint = 0.95,\n  loadings_confint = 0.9\n)\n\nplot_pc_vs(onze_vowels, onze_test, pc_no = 1, is_sig = TRUE) +\n  coord_fixed()\n```\n\n::: {.cell-output-display}\n![Significant PC1 loadings for subset of ONZE speakers in vowel space.](index_files/figure-html/fig-pc1-1.png){#fig-pc1 width=672}\n:::\n:::\n\n\n\nThe arrows in @fig-pc1 indicate relative size of movement, but do not indicate\nthe exact magnitude of movement in the vowel space expected for a specific\nincrease in PC score. The way of getting at this will vary in each research\nproject and will depend on how any models have been used. The purpose of \n`plot_pc_vs()` is to provide a quick way of getting from PC loadings to movement\nin the vowel space.\n\n`pc_flip()` allows you to flip a named PC or to specify a variable which one \nwants to be positive. So, for instance, if you know you want [trap]{.smallcaps}\nF1 to be positive in PC1, you'd do the following:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonze_test <- pc_flip(onze_test, pc_no = 1, flip_var = \"F1_TRAP\")\n```\n:::\n\n\n\nAs wil `plot_pc_vs()`, `pc_flip()` works with `prcomp`, `princomp` or\n`nzilbb.vowels::pca_test()`.\n\nWe can use `plot_pc_vs()` again to see that this has worked.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_pc_vs(onze_vowels, onze_test, pc_no = 1, is_sig = TRUE) +\n  coord_fixed()\n```\n\n::: {.cell-output-display}\n![Significant PC1 loadings for subset of ONZE speakers in vowel space (flipped).](index_files/figure-html/fig-pc1-flipped-1.png){#fig-pc1-flipped width=672}\n:::\n:::\n\n\n\n## `mds_test()`\n\nIn the course of @sheardCovaryingNewZealand2024, we build a testing function for\nchoosing a number of dimensions in Multidimensional Scaling (MDS) by analogy\nwith `pca_test()`. The function calculates the reduction in success achieved by\nadding an additional dimension to an MDS analysis for both bootstrapped and \npermuted versions of a similarity matrix. Here's what it, and the `plot_mds_test()`\nfunction look like in practice:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmds_res <- mds_test(\n  sim_matrix,\n  n_boots = 50,\n  n_perms = 50,\n  test_dimensions = 5,\n  principal = TRUE,\n  mds_type = \"ordinal\",\n  spline_degree = 2,\n  spline_int_knots = 2\n)\nplot_mds_test(mds_res)\n```\n\n::: {.cell-output-display}\n![Plot of MDS test results.](index_files/figure-html/fig-mds-test-1.png){#fig-mds-test width=672}\n:::\n:::\n\n\n\nIn @fig-mds-test, the black crosses indicate the stress reduction from adding\nan additional dimension for a given similarity matrix. The red box and whisker\nplot indicates the reduction across a series of bootstraps and the blue indicates\nthe same for permuted versions of the data. We've found that accepting the \nnumber of dimensions up to and including the first where the two distributions\nalign seems to perform well, but we are still experimenting! In the case of this\n(simulated) data, we'd go with two dimensions.\n\n## Website\n\nThe package now has a `pkgdown` website at\n<https://nzilbb.github.io/nzilbb_vowels>. Have a look to see the rest of the \ndocumentation.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}