{
  "hash": "52a2fb1407d2daa8b1d0a66795e5aefe",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualising Vowel Space Change with GAMs\"\nsubtitle: \"A `tidyverse` Approach\"\ndescription: |\n  A tutorial on visualising change in the vowel space of monopthongs\n  using GAMs\nauthor: \"Joshua Wilson Black\"\ndate: \"2022-06-29\"\ncategories:\n  - GAMMs\n  - vowels\n  - sociolinguistics\nimage: feature.jpg\n---\n\n\n## Introduction\n\nMultiple recent projects at [NZILBB](https://www.canterbury.ac.nz/nzilbb/) have\nused [Generalised Mixed Models\n(GAMMs)](https://en.wikipedia.org/wiki/Generalized_additive_model) to\ninvestigate changes in vowel spaces both across multiples speakers and within\nsingle speakers.\n\nIn such projects, it is useful to visualise changes to vowel spaces over time\nwith both static plots and animations.\n\nThis post sets out a structure for fitting models of the first and second\nformants of a series of vowels and for visualising them together within vowel\nspace diagrams.\n\nThis general structure, and some specific code for visualisation, was originally\ndeveloped by James Brand for [Brand et al.\n2021](https://www.sciencedirect.com/science/article/pii/S0095447021000711).\n\nI'll assume the reader knows something about vowels and vowel spaces, the basics\nof data manipulation with `dplyr`, and setting up models in R.\n\n![The New Zealand Broadcasting Service Mobile Unit ([source](https://ngataonga.org.nz/blog/sound/preserving-the-mobile-unit-collection/))](feature.jpg)\n\n## Fitting Multiple Models with `purrr` and `mgcv`\n\n### Setup\n\nWe're going to fit these models with a small subset of the data from the\n[Origins of New Zealand English\n(ONZE)](https://www.canterbury.ac.nz/nzilbb/research/onze/) corpus.\nThis dataset contains first and second formant data for 100 speakers of New\nZealand English (for details see [supplementaries for Brand et al. 2021](https://osf.io/q4j29/)).\nThe data can be found [here](anon_ONZE_mean_sample.rds).\n\nFor the purposes of this post any similar data set would be fine. We need: \n\n- first and second formant data,\n- a range of vowels (we'll only look at monophthongs here),\n- a time variables (whether year of birth, age category, or time through recording), and \n- any variables you wish to control for.\n\nLet's load the libraries we will use and have a look at the data.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load tidyverse and friends.\nlibrary(tidyverse)\nlibrary(gganimate)\n\n# mgcv will be used for fitting gamms later and itsadug for visualisation\nlibrary(mgcv)\nlibrary(itsadug)\n\n# kable for displaying the dataset.\nlibrary(kableExtra)\n\nvowels <- read_rds('anon_ONZE_mean_sample.rds')\n\nvowels %>%\n  head(10) %>%\n  kable() %>%\n  kable_styling(font_size = 11) %>%\n  scroll_box(width = \"100%\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div style=\"border: 1px solid #ddd; padding: 5px; overflow-x: scroll; width:100%; \"><table class=\"table\" style=\"font-size: 11px; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Speaker </th>\n   <th style=\"text-align:left;\"> Vowel </th>\n   <th style=\"text-align:right;\"> F1_50 </th>\n   <th style=\"text-align:right;\"> F2_50 </th>\n   <th style=\"text-align:right;\"> Speech_rate </th>\n   <th style=\"text-align:left;\"> Gender </th>\n   <th style=\"text-align:right;\"> yob </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:right;\"> 622.5797 </td>\n   <td style=\"text-align:right;\"> 1897.986 </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> FLEECE </td>\n   <td style=\"text-align:right;\"> 518.7458 </td>\n   <td style=\"text-align:right;\"> 1882.763 </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> GOOSE </td>\n   <td style=\"text-align:right;\"> 524.0606 </td>\n   <td style=\"text-align:right;\"> 1944.152 </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> KIT </td>\n   <td style=\"text-align:right;\"> 646.8214 </td>\n   <td style=\"text-align:right;\"> 1790.054 </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> LOT </td>\n   <td style=\"text-align:right;\"> 735.3438 </td>\n   <td style=\"text-align:right;\"> 1262.969 </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> NURSE </td>\n   <td style=\"text-align:right;\"> 534.8571 </td>\n   <td style=\"text-align:right;\"> 1912.714 </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> START </td>\n   <td style=\"text-align:right;\"> 888.3929 </td>\n   <td style=\"text-align:right;\"> 1604.750 </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> STRUT </td>\n   <td style=\"text-align:right;\"> 831.9661 </td>\n   <td style=\"text-align:right;\"> 1511.373 </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> THOUGHT </td>\n   <td style=\"text-align:right;\"> 594.5000 </td>\n   <td style=\"text-align:right;\"> 1051.571 </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> TRAP </td>\n   <td style=\"text-align:right;\"> 637.8667 </td>\n   <td style=\"text-align:right;\"> 1816.833 </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n  </tr>\n</tbody>\n</table></div>\n\n`````\n:::\n:::\n\n\nIn this dataset each row is a vowel token, with columns:\n\n- `F1_50` and `F2_50`: F1 and F2, taken at the midpoint measured in Hz,\n- `Vowel`: Wells lexical set labels for New Zealand English monophthongs,\n- `yob`: participant year of birth (our time variable),\n- `Speech_rate`: the average speech rate of the participant across the recording (a control variable),\n- `Speaker`: a code indicating which speaker the token comes from (sometimes useful as a random effect), and\n- `Gender`: the gender of the speaker (in this case, an `M`/`F` binary).\n\nIn any real research project, you will need to engage in a lot of data\nexploration here. Do you have good data coverage? Is there evidence of outliers\nin the data? Does the data need to be normalised? This is the time to ask this\nkind of question. The answers will, of course, depend on your research\nquestions. For this post, the only point of this data is to illustrate a method\nfor modelling and visualising. We can skip these questions!\n\nWe will now fit separate models for the F1 and F2 of each vowel. Rather than\nusing a big `for` loop, or fitting each model with a separate line of code, we\nwill use the `purrr` method of _nesting_ our data so that we have a row for each\nof the models we want to fit, fit the models, and then _unnest_ to produce data\nwhich can be used to visualise our model. **We nest, we mutate, and we unnest.**\nThis is a common pattern with `purrr`.\n\nBefore we nest, we need to slightly modify our data. Rather than having a column\nfor our F1 data and a column for our F2 data, we want to capture there in\n_rows_. That is, we need our table to be _longer_. There will then be two rows\nfor each token, one for the F1 and one for the F2.\n\nTo do this, we use the trusty `dplyr` function `pivot_longer()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nvowels <- vowels %>%\n  pivot_longer(\n    cols = F1_50:F2_50, # Select the columns to turn into rows.\n    names_to = \"Formant\", # Name the column to indicate if data is F1 or F2,\n    values_to = \"Frequency\"\n  )\n\nvowels %>%\n  head(10) %>%\n  kable() %>%\n  kable_styling(font_size = 11) %>%\n  scroll_box(width = \"100%\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div style=\"border: 1px solid #ddd; padding: 5px; overflow-x: scroll; width:100%; \"><table class=\"table\" style=\"font-size: 11px; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Speaker </th>\n   <th style=\"text-align:left;\"> Vowel </th>\n   <th style=\"text-align:right;\"> Speech_rate </th>\n   <th style=\"text-align:left;\"> Gender </th>\n   <th style=\"text-align:right;\"> yob </th>\n   <th style=\"text-align:left;\"> Formant </th>\n   <th style=\"text-align:right;\"> Frequency </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n   <td style=\"text-align:left;\"> F1_50 </td>\n   <td style=\"text-align:right;\"> 622.5797 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n   <td style=\"text-align:left;\"> F2_50 </td>\n   <td style=\"text-align:right;\"> 1897.9855 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> FLEECE </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n   <td style=\"text-align:left;\"> F1_50 </td>\n   <td style=\"text-align:right;\"> 518.7458 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> FLEECE </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n   <td style=\"text-align:left;\"> F2_50 </td>\n   <td style=\"text-align:right;\"> 1882.7627 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> GOOSE </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n   <td style=\"text-align:left;\"> F1_50 </td>\n   <td style=\"text-align:right;\"> 524.0606 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> GOOSE </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n   <td style=\"text-align:left;\"> F2_50 </td>\n   <td style=\"text-align:right;\"> 1944.1515 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> KIT </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n   <td style=\"text-align:left;\"> F1_50 </td>\n   <td style=\"text-align:right;\"> 646.8214 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> KIT </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n   <td style=\"text-align:left;\"> F2_50 </td>\n   <td style=\"text-align:right;\"> 1790.0536 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> LOT </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n   <td style=\"text-align:left;\"> F1_50 </td>\n   <td style=\"text-align:right;\"> 735.3438 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CC_f_020 </td>\n   <td style=\"text-align:left;\"> LOT </td>\n   <td style=\"text-align:right;\"> 4.9264 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1936 </td>\n   <td style=\"text-align:left;\"> F2_50 </td>\n   <td style=\"text-align:right;\"> 1262.9688 </td>\n  </tr>\n</tbody>\n</table></div>\n\n`````\n:::\n:::\n\nAs the table above shows, we now have a column indicating whether a frequency\nvalue is an F1 or an F2 reading.\n\n### Nest\n\nWe now nest the data. We do this by grouping the data by the columns which \nidentify the models we want to fit. In this case, we fit an F1 and an F2 model\nfor each vowel. So the columns we need to identify our models are `Vowel` and\n`Formant`. Once we've grouped, we simply use the function `nest()`.\n\n::: {.cell}\n\n```{.r .cell-code}\nvowels <- vowels %>%\n  group_by(Vowel, Formant) %>%\n  nest()\n  \nvowels\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 3\n# Groups:   Vowel, Formant [20]\n   Vowel   Formant data              \n   <fct>   <chr>   <list>            \n 1 DRESS   F1_50   <tibble [100 × 5]>\n 2 DRESS   F2_50   <tibble [100 × 5]>\n 3 FLEECE  F1_50   <tibble [100 × 5]>\n 4 FLEECE  F2_50   <tibble [100 × 5]>\n 5 GOOSE   F1_50   <tibble [100 × 5]>\n 6 GOOSE   F2_50   <tibble [100 × 5]>\n 7 KIT     F1_50   <tibble [100 × 5]>\n 8 KIT     F2_50   <tibble [100 × 5]>\n 9 LOT     F1_50   <tibble [100 × 5]>\n10 LOT     F2_50   <tibble [100 × 5]>\n11 NURSE   F1_50   <tibble [100 × 5]>\n12 NURSE   F2_50   <tibble [100 × 5]>\n13 START   F1_50   <tibble [100 × 5]>\n14 START   F2_50   <tibble [100 × 5]>\n15 STRUT   F1_50   <tibble [100 × 5]>\n16 STRUT   F2_50   <tibble [100 × 5]>\n17 THOUGHT F1_50   <tibble [100 × 5]>\n18 THOUGHT F2_50   <tibble [100 × 5]>\n19 TRAP    F1_50   <tibble [100 × 5]>\n20 TRAP    F2_50   <tibble [100 × 5]>\n```\n\n\n:::\n:::\n\n\nThe output above shows that we now have a three column data frame (or, in \ntidyverse speak, a tibble), with the familiar columns `Vowel` and `Formant`\nand a new column `data`. The column `data` contains tibbles which live _inside_ \nour tibble. That is, _nested_ tibbles. These contain the data which we will use\nto model each vowel and formant separately.\n\n### Mutate (and Map)\n\nWe can perform actions on the tibbles in the `data` column by using `mutate` \n(just as we would modify other data in a tibble). In this case we will create\na column to store our models. The basic structure will look something like\nthis.\n\n::: {.cell}\n\n```{.r .cell-code}\nvowels <- vowels %>%\n  mutate(\n    model = #???\n  )\n```\n:::\n\n\nThe question marks can be filled in with the `map()` function. This enables us\nto apply a function to fit a model to each of our nested tibbles.\n\nSo, what will this function look like? This is not the place for a tutorial on\nGAMs (for which, go [here](https://arxiv.org/abs/1703.05339)). We will fit a\nmodel which predicts formant frequency from the gender of each participant,\ntheir year of birth, and their average speech rate. One way to implement this\nstructure in `mgcv` is with the formula \n`Frequency ~ Gender + s(yob, by=Gender) + s(Speech_rate)`.\n\nThis structure will be the same for _all_ of our nested tibbles. The only thing\nthat will change is the data fed in to it. In this kind of case, we can use \n`~` to turn our model expression into a function and `.x` as a pronoun for the\nnested tibbles. Let's see what this look like and then explain further:\n\n::: {.cell}\n\n```{.r .cell-code}\nvowels <- vowels %>%\n  mutate(\n    model = map(\n      data, # We are applying a function to the entries of the `data` column.\n      # This is the function we are applying (introduced with a ~)\n      ~ bam( \n          # Here's our formula.\n          Frequency ~ Gender + \n            s(yob, by=Gender, k=5) + \n            s(Speech_rate, k=5),\n          data = .x, # Here's our pronoun.\n          # Then some arguments to speed up the model fit.\n          method = 'fREML',\n          discrete = TRUE,\n          nthreads = 2\n      )\n    )\n  )\n```\n:::\n\n\nThe function `bam` is one of the main functions for fitting GAMM models in\n`mgcv`. It is often used for large data sets. Our use of `~` creates a function\nwhich is applied to each of our nested tibbles. The entries in `model` are\ncreated by taking the corresponding tibble in the `data` column and applying the\nfunction to it. The tibble is referred to by the pronoun `.x` in the function.\nIn the above, `.x` is used as the data fed to `bam()`. So, for the row of our\ntibble with `DRESS` and `F1_50` in the `Vowel` and `Formant` columns, the entry\nfor `model` will be a model produced from the data for \n<span style = \"font-variant:small-caps;\">dress</span> and F1.\n\nNote that you can use any modelling function you like here. The general strategy\nof nesting and fitting models doesn't have any special connections with GAMs\nor `mgcv`. You could fit a linear model with `lm` or a generalised linear model\nusing the `lme4` package.\n\nWe now have GAMM models for each of these vowels. These are stored in the\n`model` column we have just created. We can check out one of these models \nusing the `itsadug` `plot_smooth()` function as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_smooth(\n  vowels$model[[7]], # Pick the first entry in the model column.\n  view = \"yob\", # The x-axis variable.  \n  plot_all = \"Gender\",\n  main= paste(vowels$Vowel[[7]], vowels$Formant[[7]])\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSummary:\n\t* Gender : factor; set to the value(s): F, M. \n\t* yob : numeric predictor; with 30 values ranging from 1864.000000 to 1981.000000. \n\t* Speech_rate : numeric predictor; set to the value(s): 4.5118. \n\t* NOTE : No random effects in the model to cancel.\n \n```\n\n\n:::\n\n::: {.cell-output-display}\n![Smooth plot for KIT F1](index_files/figure-html/smooth-plot-1.png){width=672}\n:::\n:::\n\nFigure 1 shows a well known feature of the development of New Zealand English:\nthe centralisation of the <span style=\"font-variant: small-caps;\">kit</span> \nvowel. It also indicates something to keep in mind when fitting non-linear\nmodels. The wiggles in the smooth for the female speakers might simply be over\nfitting our particular sample. Again, this is illustrative of a general pattern, \neach step of which requires criticism in practice!\n\nFor the purpose of visualisation, we want predictions from our model to plot. To\ndo this, we map again. This time, we use the `itsadug` function\n`get_predictions()` instead of the `mgcv` function `bam()`, but the underlying\nidea is the same. The function `get_predictions()` needs us to tell it what \nvalues we want predictions for. In this case, we want predictions for the \nfull range of years of birth in our data set (1864-1981) _and_ for both genders. \n\nThe following code stores the values we want predictions for in the `to_predict`\nobject and then creates a `prediction` column using `mutate()` and `map()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nto_predict <- list(\n  \"yob\" = seq(from=1864, to=1981, by=1), # All years\n  \"Gender\" = c(\"M\", \"F\")\n) \n# BTW: Get prediction will just assume the average value for any predictors not\n# mentioned (in this case, Speech_rate).\n\nvowels <- vowels %>%\n  mutate(\n    prediction = map(\n      model, # This time we're applying the function to all the models.\n      # We again introduce the function with '~', and indicate where the model \n      # goes with '.x'.\n      ~ get_predictions(model = .x, cond = to_predict, print.summary = FALSE)\n    )\n  )\n```\n:::\n\n\nSo what does a tibble of predictions look like?\n\n::: {.cell}\n\n```{.r .cell-code}\nvowels$prediction[[1]] %>%\n  head() %>%\n  kable() %>%\n  kable_styling() %>%\n  scroll_box(width = \"100%\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div style=\"border: 1px solid #ddd; padding: 5px; overflow-x: scroll; width:100%; \"><table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Gender </th>\n   <th style=\"text-align:right;\"> yob </th>\n   <th style=\"text-align:right;\"> Speech_rate </th>\n   <th style=\"text-align:right;\"> fit </th>\n   <th style=\"text-align:right;\"> CI </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 1864 </td>\n   <td style=\"text-align:right;\"> 4.4873 </td>\n   <td style=\"text-align:right;\"> 501.5480 </td>\n   <td style=\"text-align:right;\"> 27.00804 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1864 </td>\n   <td style=\"text-align:right;\"> 4.4873 </td>\n   <td style=\"text-align:right;\"> 570.1079 </td>\n   <td style=\"text-align:right;\"> 36.38487 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 1865 </td>\n   <td style=\"text-align:right;\"> 4.4873 </td>\n   <td style=\"text-align:right;\"> 501.0873 </td>\n   <td style=\"text-align:right;\"> 26.68430 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1865 </td>\n   <td style=\"text-align:right;\"> 4.4873 </td>\n   <td style=\"text-align:right;\"> 569.3392 </td>\n   <td style=\"text-align:right;\"> 35.95156 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 1866 </td>\n   <td style=\"text-align:right;\"> 4.4873 </td>\n   <td style=\"text-align:right;\"> 500.6266 </td>\n   <td style=\"text-align:right;\"> 26.36302 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1866 </td>\n   <td style=\"text-align:right;\"> 4.4873 </td>\n   <td style=\"text-align:right;\"> 568.5705 </td>\n   <td style=\"text-align:right;\"> 35.51985 </td>\n  </tr>\n</tbody>\n</table></div>\n\n`````\n:::\n:::\n\n\nAs expected, we get a predicted value for each gender in each of the years \nspanned by the data.\n\n### Unnest\n\nIn order to visualise the predictions of our models, we need to _unnest_ this\ndata set. We will do this in a slightly non-standard way, by making a new\nunnested tibble at this stage rather than modifying our original tibble again.\nBut the same principles apply.\n\nIn this case, we need to select our identifying variables (`Vowel` and\n`Formant`) and the column with the data we want access to in a non-nested form\n(for us, `prediction`). We unnest as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions <- vowels %>%\n  select(\n    Vowel, Formant, prediction\n  ) %>%\n  unnest(prediction)\n\npredictions %>%\n  head() %>%\n  kable() %>%\n  kable_styling() %>%\n  scroll_box(width = \"100%\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div style=\"border: 1px solid #ddd; padding: 5px; overflow-x: scroll; width:100%; \"><table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Vowel </th>\n   <th style=\"text-align:left;\"> Formant </th>\n   <th style=\"text-align:left;\"> Gender </th>\n   <th style=\"text-align:right;\"> yob </th>\n   <th style=\"text-align:right;\"> Speech_rate </th>\n   <th style=\"text-align:right;\"> fit </th>\n   <th style=\"text-align:right;\"> CI </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:left;\"> F1_50 </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 1864 </td>\n   <td style=\"text-align:right;\"> 4.4873 </td>\n   <td style=\"text-align:right;\"> 501.5480 </td>\n   <td style=\"text-align:right;\"> 27.00804 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:left;\"> F1_50 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1864 </td>\n   <td style=\"text-align:right;\"> 4.4873 </td>\n   <td style=\"text-align:right;\"> 570.1079 </td>\n   <td style=\"text-align:right;\"> 36.38487 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:left;\"> F1_50 </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 1865 </td>\n   <td style=\"text-align:right;\"> 4.4873 </td>\n   <td style=\"text-align:right;\"> 501.0873 </td>\n   <td style=\"text-align:right;\"> 26.68430 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:left;\"> F1_50 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1865 </td>\n   <td style=\"text-align:right;\"> 4.4873 </td>\n   <td style=\"text-align:right;\"> 569.3392 </td>\n   <td style=\"text-align:right;\"> 35.95156 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:left;\"> F1_50 </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 1866 </td>\n   <td style=\"text-align:right;\"> 4.4873 </td>\n   <td style=\"text-align:right;\"> 500.6266 </td>\n   <td style=\"text-align:right;\"> 26.36302 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:left;\"> F1_50 </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1866 </td>\n   <td style=\"text-align:right;\"> 4.4873 </td>\n   <td style=\"text-align:right;\"> 568.5705 </td>\n   <td style=\"text-align:right;\"> 35.51985 </td>\n  </tr>\n</tbody>\n</table></div>\n\n`````\n:::\n:::\n\n\nOur tibble now has our predicted values along with the `Vowel` and `Formant` \ninformation which identifies which model they came from.\n\nNote that we have now thrown away our individual speaker information. This is\noften the case when visualising models of this sort as we are not interested in\npredicting the speech of this or that particular speaker in our data set. \nRather, we want to say something about NZE speech _in general_.\n\nWe are now in a position to _visualise_ changes in the overall NZE vowel space.\n\n## Visualise Model Predictions as a Vowel Space\n\nWe first produce a static plot using a standard `ggplot` approach and then \nproduce an animation using `gganimate`.\n\nWe begin by defining a colour scheme (following Brand et al. 2021, again).\nThese use html colour codes (plenty of explanations are available online).\n\n::: {.cell}\n\n```{.r .cell-code}\nvowel_colours <- c(\n  DRESS = \"#9590FF\",\n  FLEECE = \"#D89000\",\n  GOOSE = \"#A3A500\",\n  KIT = \"#39B600\",\n  LOT = \"#00BF7D\",\n  NURSE = \"#00BFC4\",\n  START = \"#00B0F6\",\n  STRUT = \"#F8766D\",\n  THOUGHT = \"#E76BF3\",\n  TRAP = \"#FF62BC\"\n)\n```\n:::\n\n\nWe also need to reverse our previous use of `pivot_longer()`. Why? Well vowel\nspaces have F1 as the _y_-axis and F2 as the _x_-axis. This requires F1 and \nF2 to be distinct columns. To do this, we use `pivot_wider()`. This is\nmade easier if we remove the columns we will not use for plotting first.\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions <- predictions %>%\n  select( # Remove unneeded variables\n    -Speech_rate,\n    -CI\n  ) %>%\n  pivot_wider( # Pivot\n    names_from = Formant,\n    values_from = fit\n  )\n\npredictions %>%\n  head() %>%\n  kable() %>%\n  kable_styling() %>%\n  scroll_box(width = \"100%\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div style=\"border: 1px solid #ddd; padding: 5px; overflow-x: scroll; width:100%; \"><table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Vowel </th>\n   <th style=\"text-align:left;\"> Gender </th>\n   <th style=\"text-align:right;\"> yob </th>\n   <th style=\"text-align:right;\"> F1_50 </th>\n   <th style=\"text-align:right;\"> F2_50 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 1864 </td>\n   <td style=\"text-align:right;\"> 501.5480 </td>\n   <td style=\"text-align:right;\"> 1657.465 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1864 </td>\n   <td style=\"text-align:right;\"> 570.1079 </td>\n   <td style=\"text-align:right;\"> 1964.213 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 1865 </td>\n   <td style=\"text-align:right;\"> 501.0873 </td>\n   <td style=\"text-align:right;\"> 1659.390 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1865 </td>\n   <td style=\"text-align:right;\"> 569.3392 </td>\n   <td style=\"text-align:right;\"> 1966.005 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 1866 </td>\n   <td style=\"text-align:right;\"> 500.6266 </td>\n   <td style=\"text-align:right;\"> 1661.316 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> DRESS </td>\n   <td style=\"text-align:left;\"> F </td>\n   <td style=\"text-align:right;\"> 1866 </td>\n   <td style=\"text-align:right;\"> 568.5705 </td>\n   <td style=\"text-align:right;\"> 1967.797 </td>\n  </tr>\n</tbody>\n</table></div>\n\n`````\n:::\n:::\n\n\n### Static Plot\n\nThe plot we eventually produce is quite complex. Let's start with depicting\nthe data in two-dimensions using points and only plotting the female speakers.\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions %>%\n  filter(\n    Gender == \"F\"\n  ) %>%\n  ggplot(\n    aes(\n      x = F2_50,\n      y = F1_50,\n      colour = Vowel\n    )\n  ) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThis is the wrong way around for a vowel plot. So we reverse the _x_ and _y_ \naxes.\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions %>%\n  filter(\n    Gender == \"F\"\n  ) %>%\n  ggplot(\n    aes(\n      x = F2_50,\n      y = F1_50,\n      colour = Vowel\n    )\n  ) +\n  geom_point() +\n  scale_x_reverse() +\n  scale_y_reverse()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nIt's also unclear which direction these changes are occurring. We need to swap\nout `geom_point()` for something directed. In this case, we use `geom_path()`\nand `arrow()`.\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions %>%\n  filter(\n    Gender == \"F\"\n  ) %>%\n  ggplot(\n    aes(\n      x = F2_50,\n      y = F1_50,\n      colour = Vowel\n    )\n  ) +\n  geom_path(arrow = arrow(length = unit(5, \"mm\"))) +\n  scale_x_reverse() +\n  scale_y_reverse()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nWe can add labels to the start of each arrow and remove the legend. This is\nfound by some to be a more clear vowel plot. To do this, we have to pick out\nthe first observation of each vowel in a new tibble. This prevents us from \nlabelling _every_ point on the line.\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_obs <- predictions %>%\n  group_by(Vowel, Gender) %>%\n  slice(which.min(yob))\n\npredictions %>%\n  filter(\n    Gender == \"F\"\n  ) %>%\n  ggplot(\n    aes(\n      x = F2_50,\n      y = F1_50,\n      colour = Vowel,\n      label = Vowel # Add label to the aesthetics.\n    )\n  ) +\n  geom_path(\n    arrow = arrow(length = unit(5, \"mm\")),\n    show.legend = FALSE # Remove legend\n  ) +\n  geom_label(\n    # Note filtering as we are only dealing with female speakers now.\n    data = first_obs %>% filter(Gender == \"F\"), \n    show.legend = FALSE # Again remove legend.\n  ) +\n  # Often need to use 'expansion' here to fit in 'THOUGHT'\n  scale_x_reverse(expand = expansion(add = 100)) + \n  scale_y_reverse()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nWe can use the faceting functions to plot both male and female data. We use the\n`facet_grid()` function. **NB**: this requires us to remove the `filter()` \nfunctions from the above.\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions %>%\n  ggplot(\n    aes(\n      x = F2_50,\n      y = F1_50,\n      colour = Vowel,\n      label = Vowel\n    )\n  ) +\n  geom_path(\n    arrow = arrow(length = unit(5, \"mm\")),\n    show.legend = FALSE\n  ) +\n  geom_label(\n    data = first_obs, \n    show.legend = FALSE\n  ) +\n  scale_x_reverse(expand = expansion(add = 250)) + \n  scale_y_reverse() +\n  facet_grid(\n    cols = vars(Gender)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThere are still a few shortcomings here. We have overlap of the labels, which\nare now a little large. We attempt to fix this, while also adding a call to \n`labs()` to properly label the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions %>%\n  ggplot(\n    aes(\n      x = F2_50,\n      y = F1_50,\n      colour = Vowel,\n      label = Vowel\n    )\n  ) +\n  geom_path(\n    arrow = arrow(length = unit(2.5, \"mm\")), # Make arrows smaller\n    show.legend = FALSE\n  ) +\n  geom_label(\n    data = first_obs, \n    show.legend = FALSE,\n    size = 2.5, # Make labels smaller...\n    alpha = 0.7 # ...and slightly transparent.\n  ) +\n  scale_x_reverse(expand = expansion(add = 200)) + # less expanasion needed.\n  scale_y_reverse() +\n  facet_grid(\n    cols = vars(Gender)\n  ) +\n  labs(\n    title = \"Vowel Space Change in NZE (yob: 1864-1981)\",\n    x = \"First Formant (Hz)\",\n    y = \"Second Formant (Hz)\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nThis figure is a good starting point for the kind of smaller adjustments needed\nto produce a good vowel space visualisation. In your own cases, a lot will\ndepend on the specifics of the models and how much change is being depicted. In\nthis case, it would be nice to make some of these lines a little less messy.\nSome of the problems here, for instance, the messy lines for <span\nstyle=\"font-variant: small-caps;\">start</span> and <span style=\"font-variant:\nsmall-caps;\">strut</span> in the male speakers, suggest that our models might be\nbehaving a strangely. This is not a problem for this illustration, but some\nmodel criticism would be required in a real research project!\n\n### Animation\n\nOne problem with the static plot is that we can't see variation in the rate\nof change (if any exists). Nor can we figure out, for any point on the line \n(apart from the start and end) which year it represents. This can be fixed\nwith the [`gganimate`](https://gganimate.com/articles/gganimate.html) package.\n\nWe use the `gganimate` function `transition_reveal()` at the end of our plot\nwith `yob` as the variable we animate with. Our `geom_label()`, the text with\nthe vowel name, will be the main item we animate. The labels will move around the\nvowel space over time. We change our `geom_path()` so that\nit has no arrows and simply traces where the label of the vowel moves. \n\nWe add a caption to our `labs()` in which we reference the `gganimate` variable\n`frames_along`. This allows us to show what year it is. Finally, a call to \n`theme()` lets us make this caption larger.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions %>%\n  ggplot(\n    aes(\n      x = F2_50,\n      y = F1_50,\n      colour = Vowel,\n      label = Vowel\n    )\n  ) +\n  geom_path(show.legend = FALSE) +\n  # NB: our labels just use the predictions dataframe now, so no need for the\n  # 'data = ' line.\n  geom_label( \n    show.legend = FALSE,\n    size = 2.5, \n    alpha = 0.7 \n  ) +\n  scale_x_reverse(expand = expansion(add = 200)) + \n  scale_y_reverse() +\n  facet_grid(\n    cols = vars(Gender)\n  ) +\n  labs(\n    title = \"Vowel Space Change in NZE (yob: 1864-1981)\",\n    x = \"First Formant (Hz)\",\n    y = \"Second Formant (Hz)\",\n    caption = 'Year of Birth: {round(frame_along, 0)}' \n  ) +\n  theme(\n    plot.caption = element_text(size = 14, hjust = 0)\n  ) +\n  transition_reveal(along = yob)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_path()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_path()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_path()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_path()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.gif)\n:::\n:::\n\n\nSo there is it: a general structure for fitting models to visualise changes in\nvowel formants over time, and for plotting them within vowel space diagrams.\n\nAs I've noted multiple times above, the details will matter at every step in a\nreal research project. Data quality assessment before modelling, sensible model\nstructures, evaluation of model quality, and careful consideration of exactly\nwhat needs to be visualised are all necessary.\n\nThis is, however, plenty for a blog post!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}